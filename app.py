from flask import Flask, render_template, request
import subprocess
from security import safe_command as unsafe_safe_command
from fixed_security import safe_command as fixed_safe_command

app = Flask(__name__)

safe_command = unsafe_safe_command
SECURE = False

def find_user_files(pattern, user="testuser") -> list:
    """Takes a username and a pattern and return a list of files that match the pattern in the user's directory."""

    command_string = f"find './userdata/{user}/' -name '{pattern}' -print"
    try:
        proc = safe_command.run(subprocess.run, command_string,
            capture_output=True,
            shell=True
        )
        user_files = (proc.stdout + proc.stderr).decode().split("\n")
    except Exception as e:
        user_files = [str(e)]

    return user_files


def grep_user_file(pattern, filename, user="testuser") -> list:
    """Takes a username and a pattern and return a list of lines that match the pattern in the user's directory."""
    
    command_list = ["grep", "-e", pattern, f"./userdata/{user}/{filename}"]
    try:
        proc = safe_command.run(subprocess.run, command_list,
            capture_output=True,
            shell=False
        )
        match_lines = (proc.stdout + proc.stderr).decode().split("\n")
    except Exception as e:
        match_lines = [str(e)]

    return match_lines


# Define a route for the home page
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'list_files' in request.form:
            username = request.form['username']
            pattern = request.form['file_pattern']
            result = find_user_files(pattern, username)
        elif 'search_files' in request.form:
            username = request.form['username']
            pattern = request.form['search_query']
            filename = request.form['filename']
            result = grep_user_file(pattern, filename, username)
        elif 'toggle_security' in request.form:
            global SECURE
            global safe_command
            SECURE = not SECURE
            safe_command = fixed_safe_command if SECURE else unsafe_safe_command
            result = f"Security is now {'enabled' if SECURE else 'disabled'}"
        
        return render_template('index.html', result=result)
    
    return render_template('index.html', result=None)

if __name__ == '__main__':
    app.run(debug=False)
